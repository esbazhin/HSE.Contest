@model AssignToGroupViewModel

@{
    ViewData["Title"] = "AssignToGroup";
}

@section Back{
    @Html.RouteLink("Back", new { controller = "Professor", action = "AllTasks", area = "TestingSystem" })
}

<h1>Назначить группе</h1>

<p>
    <a asp-area="Administration" asp-controller="Groups" asp-action="Index">Управление группами</a>
</p>

<form asp-action="AssignToGroup" asp-controller="Professor" asp-antiforgery="true">
    <input type="hidden" asp-for="TaskId" />
    <div>
        <div>
            <label asp-for="From"></label>
            <input type="datetime-local" asp-for="From" />
        </div>
        <div>
            <label asp-for="To"></label>
            <input type="datetime-local" asp-for="To" />
        </div>
        <div>
            <label asp-for="GroupId"></label>
            <select asp-for="GroupId" asp-items="@Model.Groups"></select>
        </div>
        <div>
            <input type="submit" value="Save" />
        </div>
    </div>
</form>

@*<div id="app"></div>

    @section Scripts{
    <script src="~/js/moment.js"></script>
        <script>
            new Vue({
                el: '#app',
                data: {

                    formItemLayout: {
                        labelCol: {
                            xs: { span: 24 },
                            sm: { span: 8 },
                        },
                        wrapperCol: {
                            xs: { span: 24 },
                            sm: { span: 16 },
                        },
                    },
                    config: {
                        rules: [{ type: 'object', required: true, message: 'Please select time!' }],
                    },
                    rangeConfig: {
                        rules: [{ type: 'array', required: true, message: 'Please select time!' }],
                    },

                },
                methods: {
                    handleSubmit(e) {
                        e.preventDefault();
                        this.form.validateFields((err, fieldsValue) => {
                            if (err) {
                                return;
                            }

                            // Should format date value before submit.
                            const rangeValue = fieldsValue['range-picker'];
                            const rangeTimeValue = fieldsValue['range-time-picker'];
                            const values = {
                                ...fieldsValue,
                                'date-picker': fieldsValue['date-picker'].format('YYYY-MM-DD'),
                                'date-time-picker': fieldsValue['date-time-picker'].format('YYYY-MM-DD HH:mm:ss'),
                                'month-picker': fieldsValue['month-picker'].format('YYYY-MM'),
                                'range-picker': [rangeValue[0].format('YYYY-MM-DD'), rangeValue[1].format('YYYY-MM-DD')],
                                'range-time-picker': [
                                    rangeTimeValue[0].format('YYYY-MM-DD HH:mm:ss'),
                                    rangeTimeValue[1].format('YYYY-MM-DD HH:mm:ss'),
                                ],
                                'time-picker': fieldsValue['time-picker'].format('HH:mm:ss'),
                            };
                            console.log('Received values of form: ', values);
                        });
                    },
                },
                template: `
                        <a-form v-bind="formItemLayout" :submit="handleSubmit">
                            <a-form-item label="RangePicker[showTime]">
                                <a-range-picker
                                    v-decorator="['range-time-picker', rangeConfig]"
                                    :showTime="{ format: 'HH:mm' }"
                                    format="YYYY-MM-DD HH:mm"
                                    :placeholder="['Start Time', 'End Time']"
                                />
                        </a-form-item>
                        <a-form-item
                            :wrapper-col="{
                                xs: { span: 24, offset: 0 },
                                sm: { span: 16, offset: 8 },
                                }"
                        >
                            <a-button type="primary" html-type="submit">
                                Submit
                            </a-button>
                        </a-form-item>
                    </a-form>
                                                    `,
            });
        </script>
    }*@
